// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Article {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  author    User             @relation(fields: [authorId], references: [id])
  authorId  String           @db.ObjectId
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  slug      String           @unique
  comments  Comment[]
  Like      Like[]
  content   ArticleContent[]
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  email                String    @unique()
  password             String
  username             String    @unique()
  createdAt            DateTime  @default(now())
  role                 String    @default("USER")
  refreshToken         String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  pendingEmail         String?
  emailChangeToken     String?
  emailChangeExpires   DateTime?
  articles             Article[]
  comments             Comment[]
  Like                 Like[]
}

model ArticleContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String?
  videoUrl  String?
  order     Int
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  articleId String  @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
}
