# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  email: String!
  password: String!
  username: String!
  role: String!
}

type News {
  id: String!
  title: String!
  text: String!
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  likesCount: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type NewsPaginationResponse {
  items: [News!]!
  totalItems: Int!
  totalPages: Int!
  currentPage: Int!
}

type AuthTokens {
  access_token: String!
  refresh_token: String!
  userId: String!
}

type Comment {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  article: News!
}

type Query {
  getAllArticles: [News!]!
  getNewestArticles: [News!]!
  getArticle(id: String!): News!
  news(page: Int!, limit: Int!, author: String, search: String, sort: String): NewsPaginationResponse!
  getArticleBySlug(slug: String!): News
  articlesPaginated(page: Int!, limit: Int!, author: String, search: String, sort: String): NewsPaginationResponse!
  loadMoreArticles(skip: Int, take: Int): [News!]!
  getTopLikedLast7Days: [News!]!
  getAllUsers: [User!]!
  getUserByEmail(email: String!): User!
  commentsByArticle(articleId: String!): [Comment!]!
}

type Mutation {
  createArticle(data: CreateArticleDto!): News!
  deleteArticle(id: String!): Boolean!
  changeArticle(id: String!, data: UpdateArticleInput!): News!
  LikeArticle(data: CreateLikeInput!): News!
  createUser(data: CreateUser!): AuthTokens!
  updateUser(id: String!, data: UpdateUser!): User!
  deleteUser(id: String!): Boolean!
  login(email: String!, password: String!): AuthTokens!
  refreshTokens: AuthTokens!
  logout(userId: String!): Boolean!
  requestPasswordReset(email: String!): Boolean!
  passwordReset(token: String!, newPassword: String!): Boolean!
  addComment(data: CreateCommentInput!): Comment!
  deleteComment(id: String!): Boolean!
}

input CreateArticleDto {
  title: String!
  text: String!
  authorId: String!
}

input UpdateArticleInput {
  title: String
  text: String
  authorId: String
}

input CreateLikeInput {
  articleId: ID!
}

input CreateUser {
  email: String!
  password: String!
  username: String!
  role: String!
}

input UpdateUser {
  email: String
  password: String
  username: String
  role: String
}

input CreateCommentInput {
  text: String!
  articleId: String!
}